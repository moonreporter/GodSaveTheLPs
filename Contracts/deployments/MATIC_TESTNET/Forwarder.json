{
  "address": "0x262A73Ae4376a4D142A897c5E8148fd5F537EEb2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "domainValue",
          "type": "bytes"
        }
      ],
      "name": "DomainRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "typeStr",
          "type": "string"
        }
      ],
      "name": "RequestTypeRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GENERIC_PARAMS",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        }
      ],
      "name": "_getEncoded",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "registerDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "typeSuffix",
          "type": "string"
        }
      ],
      "name": "registerRequestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "typeHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc3900e5d43a5425ae10305bf319f0eb2119fbb0328e463150aaf8afec7e5e29a",
  "receipt": {
    "to": null,
    "from": "0xe033CABdf7765e4Cb3F2b12364ACa9F7c16e36e9",
    "contractAddress": "0x262A73Ae4376a4D142A897c5E8148fd5F537EEb2",
    "transactionIndex": 1,
    "gasUsed": "1155235",
    "logsBloom": "0x
    "blockHash": "0xb4eb9022f796efe6002e6b5711b87bc0ae4ee4cfca152ccf5b7cd84d9f56566a",
    "transactionHash": "0xc3900e5d43a5425ae10305bf319f0eb2119fbb0328e463150aaf8afec7e5e29a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19952789,
        "transactionHash": "0xc3900e5d43a5425ae10305bf319f0eb2119fbb0328e463150aaf8afec7e5e29a",
        "address": "0x262A73Ae4376a4D142A897c5E8148fd5F537EEb2",
        "topics": [
          "0x64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202",
          "0x2510fc5e187085770200b027d9f2cc4b930768f3b2bd81daafb71ffeb53d21c4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006d466f72776172645265717565737428616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c2900000000000000000000000000000000000000",
        "logIndex": 10,
        "blockHash": "0xb4eb9022f796efe6002e6b5711b87bc0ae4ee4cfca152ccf5b7cd84d9f56566a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19952789,
        "transactionHash": "0xc3900e5d43a5425ae10305bf319f0eb2119fbb0328e463150aaf8afec7e5e29a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e033cabdf7765e4cb3f2b12364aca9f7c16e36e9",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000041aae1bce9e000000000000000000000000000000000000000000000000000dfb4d9aac51fc73000000000000000000000000000000000000000000000193c81c4df8892332670000000000000000000000000000000000000000000000000df732ec90835e73000000000000000000000000000000000000000000000193c82068a6a4f1d067",
        "logIndex": 11,
        "blockHash": "0xb4eb9022f796efe6002e6b5711b87bc0ae4ee4cfca152ccf5b7cd84d9f56566a"
      }
    ],
    "blockNumber": 19952789,
    "cumulativeGasUsed": "2068783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "19c6f5870378525e32cdc0ed821f0d7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"RequestTypeRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENERIC_PARAMS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"}],\"name\":\"_getEncoded\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeSuffix\",\"type\":\"string\"}],\"name\":\"registerRequestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"typeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"params\":{\"name\":\"the domain's display name\",\"version\":\"the domain/protocol version\"}},\"registerRequestType(string,string)\":{\"params\":{\"typeName\":\"- the name of the request type.\",\"typeSuffix\":\"- any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"notice\":\"Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.\"},\"registerRequestType(string,string)\":{\"notice\":\"Register a new Request typehash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/forwarder/Forwarder.sol\":\"Forwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"contracts/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.2;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() {     \\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _verifyAndUpdateNonce(req);\\n\\n        require(req.validUntil == 0 || req.validUntil > block.number, \\\"FWD: request expired\\\");\\n\\n        uint gasForTransfer = 0;\\n        if ( req.value != 0 ) {\\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\\n        }\\n        bytes memory callData = abi.encodePacked(req.data, req.from);\\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \\\"FWD: insufficient gas\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\\n        if ( req.value != 0 && address(this).balance>0 ) {\\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest calldata req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\\n        require(nonces[req.from]++ == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"FWD: invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    function _verifySig(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"FWD: unregistered domain sep.\\\");\\n        require(typeHashes[requestTypeHash], \\\"FWD: unregistered typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"FWD: signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest calldata req,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\\n        // still, we must make sure all first params are encoded as abi.encode()\\n        // would encode them - as 256-bit-wide params.\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            uint256(uint160(req.from)),\\n            uint256(uint160(req.to)),\\n            req.value,\\n            req.gas,\\n            req.nonce,\\n            keccak256(req.data),\\n            req.validUntil,\\n            suffixData\\n        );\\n    }\\n}\",\"keccak256\":\"0xd426731d4f3fd120cd4ea6236d5845e335951fbb53e04e02d23ca5b1c0e57af6\",\"license\":\"GPL-3.0-only\"},\"contracts/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.2;\\npragma abicoder v2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntil;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     * also revert if domainSeparator or requestTypeHash are not registered.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - any extra data after the generic params.\\n     *  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\",\"keccak256\":\"0xc5632a4f6c0f4cfac1fa33039cecfd6e23eba56b0449d0ba722623052518b069\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006040518060800160405280605d8152602001620014dc605d9139604051602001620000409190620000c8565b60408051601f1981840301815291905290506200005d8162000064565b5062000174565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290620000bc9085906200010c565b60405180910390a25050565b60006e08cdee4eec2e4c8a4cae2eacae6e85608b1b82528251620000f481600f85016020870162000141565b602960f81b600f939091019283015250601001919050565b60006020825282518060208401526200012d81604085016020870162000141565b601f01601f19169190910160400192915050565b60005b838110156200015e57818101518382015260200162000144565b838111156200016e576000848401525b50505050565b61135880620001846000396000f3fe6080604052600436106100955760003560e01c8063c3f28abd11610059578063c3f28abd14610192578063c722f177146101a7578063d9210be5146101d7578063e024dc7f146101f7578063e2b62f2d146102185761009c565b8063066a310c146100a157806321fe98df146100cc5780632d0335ab1461010c5780639c7b459214610150578063ad9f99c7146101725761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b6610238565b6040516100c39190611163565b60405180910390f35b3480156100d857600080fd5b506100fc6100e7366004610ead565b60006020819052908152604090205460ff1681565b60405190151581526020016100c3565b34801561011857600080fd5b50610142610127366004610e7f565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100c3565b34801561015c57600080fd5b5061017061016b366004610ec5565b610254565b005b34801561017e57600080fd5b5061017061018d366004610f2e565b61034b565b34801561019e57600080fd5b506100b661036c565b3480156101b357600080fd5b506100fc6101c2366004610ead565b60016020526000908152604090205460ff1681565b3480156101e357600080fd5b506101706101f2366004610ec5565b610388565b61020a610205366004610f2e565b610499565b6040516100c3929190611140565b34801561022457600080fd5b506100b6610233366004610fd2565b6106b0565b6040518060800160405280605d8152602001611274605d913981565b600046905060006040518060800160405280605281526020016112d16052913980519060200120868660405161028b92919061109f565b604051809103902085856040516102a392919061109f565b6040805191829003822060208301949094528101919091526060810191909152608081018390523060a082015260c00160408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d89061033a908590611163565b60405180910390a250505050505050565b6103548761074a565b610363878787878787876107c7565b50505050505050565b6040518060800160405280605281526020016112d16052913981565b60005b838110156104445760008585838181106103b557634e487b7160e01b600052603260045260246000fd5b909101356001600160f81b031916915050600560fb1b81148015906103e85750602960f81b6001600160f81b0319821614155b6104315760405162461bcd60e51b81526020600482015260156024820152744657443a20696e76616c696420747970656e616d6560581b60448201526064015b60405180910390fd5b508061043c81611242565b91505061038b565b50600084846040518060800160405280605d8152602001611274605d913985856040516020016104789594939291906110f4565b60405160208183030381529060405290506104928161098f565b5050505050565b600060606104ac898989898989896107c7565b6104b5896109f1565b60c089013515806104c95750438960c00135115b61050c5760405162461bcd60e51b81526020600482015260146024820152731195d10e881c995c5d595cdd08195e1c1a5c995960621b6044820152606401610428565b600060408a01351561051d5750619c405b600061052c60a08c018c611176565b61053960208e018e610e7f565b60405160200161054b939291906110af565b60408051601f19818403018152919052905061056b8260608d01356111bb565b60405a61057990603f6111f3565b61058391906111d3565b10156105c95760405162461bcd60e51b81526020600482015260156024820152744657443a20696e73756666696369656e742067617360581b6044820152606401610428565b6105d960408c0160208d01610e7f565b6001600160a01b03168b606001358c60400135836040516105fa91906110d8565b600060405180830381858888f193505050503d8060008114610638576040519150601f19603f3d011682016040523d82523d6000602084013e61063d565b606091505b50909450925060408b0135158015906106565750600047115b156106a25761066860208c018c610e7f565b6001600160a01b03166108fc479081150290604051600060405180830381858888f193505050501580156106a0573d6000803e3d6000fd5b505b505097509795505050505050565b6060836106c06020870187610e7f565b6001600160a01b03166106d96040880160208901610e7f565b6001600160a01b03166040880135606089013560808a01356106fe60a08c018c611176565b60405161070c92919061109f565b6040519081900381206107319796959493929160c08e0135908c908c90602001611052565b6040516020818303038152906040529050949350505050565b6080810135600260006107606020850185610e7f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054146107c45760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610428565b50565b60008681526001602052604090205460ff166108255760405162461bcd60e51b815260206004820152601d60248201527f4657443a20756e7265676973746572656420646f6d61696e207365702e0000006044820152606401610428565b60008581526020819052604090205460ff166108835760405162461bcd60e51b815260206004820152601a60248201527f4657443a20756e726567697374657265642074797065686173680000000000006044820152606401610428565b600086610892898888886106b0565b80516020918201206040516108be93920161190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209182012091506108e490890189610e7f565b6001600160a01b031661092f84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610a759050565b6001600160a01b0316146109855760405162461bcd60e51b815260206004820152601760248201527f4657443a207369676e6174757265206d69736d617463680000000000000000006044820152606401610428565b5050505050505050565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202906109e5908590611163565b60405180910390a25050565b608081013560026000610a076020850185610e7f565b6001600160a01b0316815260208101919091526040016000908120805491610a2e83611242565b91905055146107c45760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610428565b6000806000610a848585610a99565b91509150610a9181610b09565b509392505050565b600080825160411415610ad05760208301516040840151606085015160001a610ac487828585610d0c565b94509450505050610b02565b825160401415610afa5760208301516040840151610aef868383610df9565b935093505050610b02565b506000905060025b9250929050565b6000816004811115610b2b57634e487b7160e01b600052602160045260246000fd5b1415610b36576107c4565b6001816004811115610b5857634e487b7160e01b600052602160045260246000fd5b1415610ba65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610428565b6002816004811115610bc857634e487b7160e01b600052602160045260246000fd5b1415610c165760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610428565b6003816004811115610c3857634e487b7160e01b600052602160045260246000fd5b1415610c915760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610428565b6004816004811115610cb357634e487b7160e01b600052602160045260246000fd5b14156107c45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610428565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d435750600090506003610df0565b8460ff16601b14158015610d5b57508460ff16601c14155b15610d6c5750600090506004610df0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610dc0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610de957600060019250925050610df0565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01610e1a87828885610d0c565b935093505050935093915050565b60008083601f840112610e39578182fd5b50813567ffffffffffffffff811115610e50578182fd5b602083019150836020828501011115610b0257600080fd5b600060e08284031215610e79578081fd5b50919050565b600060208284031215610e90578081fd5b81356001600160a01b0381168114610ea6578182fd5b9392505050565b600060208284031215610ebe578081fd5b5035919050565b60008060008060408587031215610eda578283fd5b843567ffffffffffffffff80821115610ef1578485fd5b610efd88838901610e28565b90965094506020870135915080821115610f15578384fd5b50610f2287828801610e28565b95989497509550505050565b600080600080600080600060a0888a031215610f48578283fd5b873567ffffffffffffffff80821115610f5f578485fd5b610f6b8b838c01610e68565b985060208a0135975060408a0135965060608a0135915080821115610f8e578485fd5b610f9a8b838c01610e28565b909650945060808a0135915080821115610fb2578384fd5b50610fbf8a828b01610e28565b989b979a50959850939692959293505050565b60008060008060608587031215610fe7578384fd5b843567ffffffffffffffff80821115610ffe578586fd5b61100a88838901610e68565b9550602087013594506040870135915080821115610f15578384fd5b6000815180845261103e816020860160208601611212565b601f01601f19169290920160200192915050565b60008b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e083015261010083858285013791909201019081529998505050505050505050565b6000828483379101908152919050565b6000838583375060609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600082516110ea818460208701611212565b9190910192915050565b600085878337600560fb1b8287019081528551611118816001840160208a01611212565b600b60fa1b600192909101918201528385600283013790920160020191825250949350505050565b600083151582526040602083015261115b6040830184611026565b949350505050565b600060208252610ea66020830184611026565b6000808335601e1984360301811261118c578283fd5b83018035915067ffffffffffffffff8211156111a6578283fd5b602001915036819003821315610b0257600080fd5b600082198211156111ce576111ce61125d565b500190565b6000826111ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561120d5761120d61125d565b500290565b60005b8381101561122d578181015183820152602001611215565b8381111561123c576000848401525b50505050565b60006000198214156112565761125661125d565b5060010190565b634e487b7160e01b600052601160045260246000fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a2646970667358221220884e2f4561040e464ea1110f7ad358c608f069ffc4e0fcd89585253fcae69cc664736f6c63430008020033616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063c3f28abd11610059578063c3f28abd14610192578063c722f177146101a7578063d9210be5146101d7578063e024dc7f146101f7578063e2b62f2d146102185761009c565b8063066a310c146100a157806321fe98df146100cc5780632d0335ab1461010c5780639c7b459214610150578063ad9f99c7146101725761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b6610238565b6040516100c39190611163565b60405180910390f35b3480156100d857600080fd5b506100fc6100e7366004610ead565b60006020819052908152604090205460ff1681565b60405190151581526020016100c3565b34801561011857600080fd5b50610142610127366004610e7f565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100c3565b34801561015c57600080fd5b5061017061016b366004610ec5565b610254565b005b34801561017e57600080fd5b5061017061018d366004610f2e565b61034b565b34801561019e57600080fd5b506100b661036c565b3480156101b357600080fd5b506100fc6101c2366004610ead565b60016020526000908152604090205460ff1681565b3480156101e357600080fd5b506101706101f2366004610ec5565b610388565b61020a610205366004610f2e565b610499565b6040516100c3929190611140565b34801561022457600080fd5b506100b6610233366004610fd2565b6106b0565b6040518060800160405280605d8152602001611274605d913981565b600046905060006040518060800160405280605281526020016112d16052913980519060200120868660405161028b92919061109f565b604051809103902085856040516102a392919061109f565b6040805191829003822060208301949094528101919091526060810191909152608081018390523060a082015260c00160408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d89061033a908590611163565b60405180910390a250505050505050565b6103548761074a565b610363878787878787876107c7565b50505050505050565b6040518060800160405280605281526020016112d16052913981565b60005b838110156104445760008585838181106103b557634e487b7160e01b600052603260045260246000fd5b909101356001600160f81b031916915050600560fb1b81148015906103e85750602960f81b6001600160f81b0319821614155b6104315760405162461bcd60e51b81526020600482015260156024820152744657443a20696e76616c696420747970656e616d6560581b60448201526064015b60405180910390fd5b508061043c81611242565b91505061038b565b50600084846040518060800160405280605d8152602001611274605d913985856040516020016104789594939291906110f4565b60405160208183030381529060405290506104928161098f565b5050505050565b600060606104ac898989898989896107c7565b6104b5896109f1565b60c089013515806104c95750438960c00135115b61050c5760405162461bcd60e51b81526020600482015260146024820152731195d10e881c995c5d595cdd08195e1c1a5c995960621b6044820152606401610428565b600060408a01351561051d5750619c405b600061052c60a08c018c611176565b61053960208e018e610e7f565b60405160200161054b939291906110af565b60408051601f19818403018152919052905061056b8260608d01356111bb565b60405a61057990603f6111f3565b61058391906111d3565b10156105c95760405162461bcd60e51b81526020600482015260156024820152744657443a20696e73756666696369656e742067617360581b6044820152606401610428565b6105d960408c0160208d01610e7f565b6001600160a01b03168b606001358c60400135836040516105fa91906110d8565b600060405180830381858888f193505050503d8060008114610638576040519150601f19603f3d011682016040523d82523d6000602084013e61063d565b606091505b50909450925060408b0135158015906106565750600047115b156106a25761066860208c018c610e7f565b6001600160a01b03166108fc479081150290604051600060405180830381858888f193505050501580156106a0573d6000803e3d6000fd5b505b505097509795505050505050565b6060836106c06020870187610e7f565b6001600160a01b03166106d96040880160208901610e7f565b6001600160a01b03166040880135606089013560808a01356106fe60a08c018c611176565b60405161070c92919061109f565b6040519081900381206107319796959493929160c08e0135908c908c90602001611052565b6040516020818303038152906040529050949350505050565b6080810135600260006107606020850185610e7f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054146107c45760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610428565b50565b60008681526001602052604090205460ff166108255760405162461bcd60e51b815260206004820152601d60248201527f4657443a20756e7265676973746572656420646f6d61696e207365702e0000006044820152606401610428565b60008581526020819052604090205460ff166108835760405162461bcd60e51b815260206004820152601a60248201527f4657443a20756e726567697374657265642074797065686173680000000000006044820152606401610428565b600086610892898888886106b0565b80516020918201206040516108be93920161190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209182012091506108e490890189610e7f565b6001600160a01b031661092f84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610a759050565b6001600160a01b0316146109855760405162461bcd60e51b815260206004820152601760248201527f4657443a207369676e6174757265206d69736d617463680000000000000000006044820152606401610428565b5050505050505050565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202906109e5908590611163565b60405180910390a25050565b608081013560026000610a076020850185610e7f565b6001600160a01b0316815260208101919091526040016000908120805491610a2e83611242565b91905055146107c45760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610428565b6000806000610a848585610a99565b91509150610a9181610b09565b509392505050565b600080825160411415610ad05760208301516040840151606085015160001a610ac487828585610d0c565b94509450505050610b02565b825160401415610afa5760208301516040840151610aef868383610df9565b935093505050610b02565b506000905060025b9250929050565b6000816004811115610b2b57634e487b7160e01b600052602160045260246000fd5b1415610b36576107c4565b6001816004811115610b5857634e487b7160e01b600052602160045260246000fd5b1415610ba65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610428565b6002816004811115610bc857634e487b7160e01b600052602160045260246000fd5b1415610c165760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610428565b6003816004811115610c3857634e487b7160e01b600052602160045260246000fd5b1415610c915760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610428565b6004816004811115610cb357634e487b7160e01b600052602160045260246000fd5b14156107c45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610428565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d435750600090506003610df0565b8460ff16601b14158015610d5b57508460ff16601c14155b15610d6c5750600090506004610df0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610dc0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610de957600060019250925050610df0565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01610e1a87828885610d0c565b935093505050935093915050565b60008083601f840112610e39578182fd5b50813567ffffffffffffffff811115610e50578182fd5b602083019150836020828501011115610b0257600080fd5b600060e08284031215610e79578081fd5b50919050565b600060208284031215610e90578081fd5b81356001600160a01b0381168114610ea6578182fd5b9392505050565b600060208284031215610ebe578081fd5b5035919050565b60008060008060408587031215610eda578283fd5b843567ffffffffffffffff80821115610ef1578485fd5b610efd88838901610e28565b90965094506020870135915080821115610f15578384fd5b50610f2287828801610e28565b95989497509550505050565b600080600080600080600060a0888a031215610f48578283fd5b873567ffffffffffffffff80821115610f5f578485fd5b610f6b8b838c01610e68565b985060208a0135975060408a0135965060608a0135915080821115610f8e578485fd5b610f9a8b838c01610e28565b909650945060808a0135915080821115610fb2578384fd5b50610fbf8a828b01610e28565b989b979a50959850939692959293505050565b60008060008060608587031215610fe7578384fd5b843567ffffffffffffffff80821115610ffe578586fd5b61100a88838901610e68565b9550602087013594506040870135915080821115610f15578384fd5b6000815180845261103e816020860160208601611212565b601f01601f19169290920160200192915050565b60008b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e083015261010083858285013791909201019081529998505050505050505050565b6000828483379101908152919050565b6000838583375060609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600082516110ea818460208701611212565b9190910192915050565b600085878337600560fb1b8287019081528551611118816001840160208a01611212565b600b60fa1b600192909101918201528385600283013790920160020191825250949350505050565b600083151582526040602083015261115b6040830184611026565b949350505050565b600060208252610ea66020830184611026565b6000808335601e1984360301811261118c578283fd5b83018035915067ffffffffffffffff8211156111a6578283fd5b602001915036819003821315610b0257600080fd5b600082198211156111ce576111ce61125d565b500190565b6000826111ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561120d5761120d61125d565b500290565b60005b8381101561122d578181015183820152602001611215565b8381111561123c576000848401525b50505050565b60006000198214156112565761125661125d565b5060010190565b634e487b7160e01b600052601160045260246000fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a2646970667358221220884e2f4561040e464ea1110f7ad358c608f069ffc4e0fcd89585253fcae69cc664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "params": {
          "name": "the domain's display name",
          "version": "the domain/protocol version"
        }
      },
      "registerRequestType(string,string)": {
        "params": {
          "typeName": "- the name of the request type.",
          "typeSuffix": "- any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "notice": "Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value."
      },
      "registerRequestType(string,string)": {
        "notice": "Register a new Request typehash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6430,
        "contract": "contracts/forwarder/Forwarder.sol:Forwarder",
        "label": "typeHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6434,
        "contract": "contracts/forwarder/Forwarder.sol:Forwarder",
        "label": "domains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6438,
        "contract": "contracts/forwarder/Forwarder.sol:Forwarder",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}